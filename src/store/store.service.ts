import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject, NEVER, Observable, Subject, Subscription, catchError, distinctUntilChanged, map, shareReplay, switchMap, tap } from 'rxjs';

export interface AppState {
  limit:number
  offset:number
  pokemons:any[]
}

@Injectable({
  providedIn: 'root'
})

export class StoreService {
  //‚Äã Reducer
  private state= new BehaviorSubject<AppState>( 
    {
      limit:10,
      offset:1,
      pokemons:[]
    }
  );
  
  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å state ‡∏°‡∏≤‡πÉ‡∏ä‡πâ
  limit$ = this.createSelector(state=>state.limit) // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ limit ‡∏à‡∏≤‡∏Å state
  offset$ = this.createSelector(state => state.offset); // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ offset ‡∏à‡∏≤‡∏Å state
  pokemons$ = this.createSelector(state=>state.pokemons) // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ pokemons ‡∏à‡∏≤‡∏Å state
  test = 20
  logState(){
    console.log(this.state);
    console.log(this.state.value.limit);
    console.log(this.state.value.offset);
    
    console.log(this.limit$);
    console.log(this.offset$);
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Action ‡∏î‡πâ‡∏ß‡∏¢ Subject
  private increaseLimitAction = new Subject<number>() //‡∏Å‡∏≥‡∏´‡∏ô‡∏î data ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Action
  private decreaseLimitAction = new Subject<number>()
  private decreaseOffsetAction = new Subject<number>()
  private increaseOffsetAction = new Subject<number>()
  private loadPokemonAction = new Subject<void>();
  private loadPokemonSuccessAction = new Subject<any[]>();
  private loadPokemonErrorAction = new Subject<any[]>();
  

  constructor(private http:HttpClient) {
    //‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Action increaseLimit
    this.createReducer(this.increaseLimitAction,(state,limit)=>{
      state.limit += limit //‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ limit ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà state
      return state;
    })
    //‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Action decreaseLimit
    this.createReducer(this.decreaseLimitAction,(state,limit)=>{
      state.limit -= limit //‡∏•‡∏î‡∏Ñ‡πà‡∏≤ limit ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà state
      return state
    })
    //‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Action increaseOffset
    this.createReducer(this.increaseOffsetAction,(state,offset)=>{
      state.offset += offset //‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ offset ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà state
      return state
    })
    //‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Action decraseOffset
    this.createReducer(this.decreaseOffsetAction,(state,offset)=>{
      state.offset -= offset //‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ offset ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà state
      return state
    })

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Action loadPokemonSuccessAction ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ response ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô state pokemon
    this.createReducer(this.loadPokemonSuccessAction,(state,pokemons)=>{
      state.pokemons = pokemons
      return state
    })
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Action loadPokemonErrorAction
    this.createReducer(this.loadPokemonErrorAction.pipe(tap(err=>{
      console.error(err)
    })),(state, action)=>{
      state.pokemons = [];
      return state;
    })

    //üî¥ ‡∏™‡∏£‡πâ‡∏≤‡∏á Effect
    //‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ loadPokemonAction ‡πÉ‡∏´‡πâ‡∏¢‡∏¥‡∏á pokemonAPI
    this.createEffect(this.loadPokemonAction.pipe(switchMap(()=>{
        return this.http.get("https://pokeapi.co/api/v2/pokemon?offset=300&limit=100")
        .pipe(catchError(err=>{
          this.loadPokemonErrorAction.next(err) //‡∏ñ‡πâ‡∏≤ load ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ loadPokemonErrorAction
          return NEVER;
        }))
    }),tap(response=>{
      this.loadPokemonSuccessAction.next([]) //‡∏ñ‡πâ‡∏≤ load ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ loadPokemonSuccessAction
    })))
  }

  //üî¥ Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Selector
  // ‡∏£‡∏±‡∏ö functon state > ‡∏°‡∏µ parameter ‡πÄ‡∏õ‡πá‡∏ô state ‡∏ó‡∏µ‡∏°‡∏µ type ‡πÄ‡∏õ‡πá‡∏ô AppState
  private createSelector<T>(selector:(state:AppState)=>T):Observable<T>{ //‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ Selector return ‡πÄ‡∏õ‡πá‡∏ô Observable
    return this.state.pipe(  
      map(selector), //map ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      distinctUntilChanged(), //‡∏ñ‡πâ‡∏≤ state ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥
      shareReplay(1) //‡πÉ‡∏´‡πâ component ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ subscribe ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ state ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
    );
  }

  inCreateLimit(limit:number){
    this.increaseLimitAction.next(limit)
  }
  decreaseLimit(limit:number){
    this.decreaseLimitAction.next(limit)
  }
  increaseOffset(offset:number){
    this.increaseOffsetAction.next(offset)
  }
  decreaseOffset(offset:number){
    this.decreaseOffsetAction.next(offset)
  }
  loadPokemon(){
    this.loadPokemonAction.next()
  }
  

  //üî¥ Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Reducer
  private createReducer<T>(
    action$:Observable<T>, // ‡∏£‡∏±‡∏ö Action ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    accumulator:(
      state:AppState, // ‡∏£‡∏±‡∏ö state ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      action:T)  // ‡∏£‡∏±‡∏ö Action ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
      => AppState // ‡πÅ‡∏•‡∏∞ method ‡∏ô‡∏µ‡πâ‡∏à‡∏∞ return state ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
  ){
    // ‡∏£‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Action >> ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Action ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á subscribe
    action$.subscribe((action)=>{
      const state = {...this.state.value} // ‡∏î‡∏∂‡∏á state ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
      const newState = accumulator(state,action) // ‡∏™‡πà‡∏á state ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô accumulator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ state ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
      this.state.next(newState) // ‡∏õ‡∏•‡πà‡∏≠‡∏¢ state ‡πÉ‡∏´‡∏°‡πà
    })
  }

  //üî¥ Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Effect
  private createEffect<T>(effect$:Observable<T>) :Subscription{ //‡∏£‡∏±‡∏ö effect ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Observable ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    return effect$.subscribe();
  }
  
}
